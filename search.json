[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome! This is Nico TestingW!!!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/hw2/index.html",
    "href": "posts/hw2/index.html",
    "title": "HW 1",
    "section": "",
    "text": "Step 1:\nimport all necessary packages\n\nimport sqlite3\nimport pandas as pd\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nimport plotly.express as px\n\n\n\nStep 2\n\nImport the csv files: temps, countries, and stations\nThen, we will use the prepare_df function to reorganize the temps csv file. We can preview the temps file after we run it through the function to see the changes.\n\n\ntemps = pd.read_csv(\"temps.csv\")\n\ncountries_url = \"https://raw.githubusercontent.com/mysociety/gaze/master/data/fips-10-4-to-iso-country-codes.csv\"\ncountries = pd.read_csv(countries_url)\n\nstations = pd.read_csv(\"station-metadata.csv\")\n\n\ndef prepare_df(df):\n    df = df.set_index(keys=[\"ID\", \"Year\"])\n    df = df.stack()\n    df = df.reset_index()\n    df = df.rename(columns = {\"level_2\"  : \"Month\" , 0 : \"Temp\"})\n    df[\"Month\"] = df[\"Month\"].str[5:].astype(int)\n    df[\"Temp\"]  = df[\"Temp\"] / 100\n    return(df)\n\n\ntemps = prepare_df(temps)\ntemps\n\n\n\n\n\n\n\n\nID\nYear\nMonth\nTemp\n\n\n\n\n0\nACW00011604\n1961\n1\n-0.89\n\n\n1\nACW00011604\n1961\n2\n2.36\n\n\n2\nACW00011604\n1961\n3\n4.72\n\n\n3\nACW00011604\n1961\n4\n7.73\n\n\n4\nACW00011604\n1961\n5\n11.28\n\n\n...\n...\n...\n...\n...\n\n\n13992657\nZIXLT622116\n1970\n8\n15.40\n\n\n13992658\nZIXLT622116\n1970\n9\n20.40\n\n\n13992659\nZIXLT622116\n1970\n10\n20.30\n\n\n13992660\nZIXLT622116\n1970\n11\n21.30\n\n\n13992661\nZIXLT622116\n1970\n12\n21.50\n\n\n\n\n13992662 rows × 4 columns\n\n\n\nWe can see that now that the Month column now reflects all months, instead of each month being in its own column\n\n\nStep 3:\nUsing SQLITE, create a data base called “temps.db”. We link the temps file to “temperatures” We link the stations file to “stations” We link the countries file to “countries”\nNow all three data sets live within our temps.db data base\nWe make sure to close our connection to the database once we created it.\n\nwith sqlite3.connect(\"temps.db\") as conn:\n    temps.to_sql(\"temperatures\", conn, if_exists = \"replace\", index = False)\n    stations.to_sql(\"stations\", conn, if_exists = \"replace\", index=False)\n    countries.to_sql(\"countries\", conn, if_exists = \"replace\", index=False)\n\n\nconn.close()\n#closes connection\n\n\n\nStep 4:\nDefine the query_climate_database function. This function takes 5 parameters: db_file, country, year_begin, year_end, & month. - db_file is the name of our database file. In this case, its “temps.db” - country is the name of the country we are inquiring about. - year_begin is the beginning of the range of years we are inquiring about - year_end is the ending of the range of years we are inquiring about - month is the month number we are inquring about (example: January is 1)\n\nwe use SELECT to select the specified columns, JOIN to put the columns from multiple tables next to one another, and WHERE to specify conditions using the parameters\n\n\ndef query_climate_database(db_file, country, year_begin, year_end, month):\n    \n    # opens a connection to our data base\n    conn = sqlite3.connect(db_file)\n    \n    # sets a cursor within our database\n    cursor = conn.cursor()\n    \n   # collects column Name from countries and the first two digits of the ID column from temperatures.\n    # we take the columns where the country name is the one we are inquring about, and the ID matches the same one in the countries table.\n    cursor.execute(f'SELECT C.Name, SUBSTR(T.ID,1,2) FROM temperatures T JOIN countries C WHERE C.Name=\"{country}\" AND SUBSTR(T.ID,1,2) = C.\"FIPS 10-4\"')  \n\n    # this gets jusst the first row in the columns we collected above\n    result = [cursor.fetchone() for i in range(1)]  \n    #this gives us Name and first two letters\n    # for example, for India this gives us IN, which lets us select it from the ID column\n    \n    letters = result[0][1] # this gives us IN\n    \n    \n    # this selects Year Column, Temp Column, and ID column from temperatres table where the ID column matches\n    # the letters we just got from above and the Years are between year_begin and year_month\n    # and where the month is the one in question\n    x = cursor.execute(f'SELECT T.Year, T.Temp, T.ID FROM temperatures T WHERE SUBSTR(T.ID,1,2)=\"{letters}\" AND T.Year &lt;= {year_end} AND T.Year &gt;= {year_begin} AND T.Month={month}')\n    \n    \n    \n    # we now have year and temp for the given inputs\n    #still need name of weatherpeerson and latitude/longitude\n    cursor = conn.cursor()\n    \n    # this selects the name of the station, the latitiude and longitude of the station, and the station ID\n    # where the ID of the station matches the ID of the lettes in refrenc eto the country\n    y=cursor.execute(f'SELECT S.NAME, S.LATITUDE, S.LONGITUDE, S.ID FROM stations S LEFT JOIN temperatures T on T.ID = S.ID WHERE SUBSTR(S.ID,1,2)=\"{letters}\"')\n    \n    \n    \n\n    # putting all info into data frame and naming columns as such\n    df = pd.DataFrame(x, columns = [\"YEAR\", \"TEMP\", \"ID\"])\n    df2 = pd.DataFrame(y, columns = [\"NAME\", \"LATITUDE\", \"LONGITUDE\", \"ID\"])\n    df2[\"COUNTRY\"] = country\n    #print(cursor.fetchall())\n    merged = pd.merge(df, df2, on='ID')\n    dropped = merged.dropna()\n    final = dropped.drop_duplicates()\n    \n    \n\n    # Reorder columns\n    reordered = final[[\"NAME\", \"LATITUDE\", \"LONGITUDE\", \"COUNTRY\", \"YEAR\", \"ID\", \"TEMP\"]]\n    \n    #changing the ID column to display the month instead\n    reordered[\"ID\"] = month\n    final2 = reordered.rename(columns={'ID': 'MONTH'})\n    \n    #this resets the indexes\n    reset = final2.reset_index(drop=True)\n\n\n    # closes the connection\n    conn.close()\n\n    return reset\n\n\nnow test our function\n\n\ntest = query_climate_database(\"temps.db\", \"India\", 1980, 2020, 1)\ntest\n\n\n\n\n\n\n\n\nNAME\nLATITUDE\nLONGITUDE\nCOUNTRY\nYEAR\nMONTH\nTEMP\n\n\n\n\n0\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1980\n1\n23.48\n\n\n1\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1981\n1\n24.57\n\n\n2\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1982\n1\n24.19\n\n\n3\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1983\n1\n23.51\n\n\n4\nPBO_ANANTAPUR\n14.583\n77.633\nIndia\n1984\n1\n24.81\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n3147\nDARJEELING\n27.050\n88.270\nIndia\n1983\n1\n5.10\n\n\n3148\nDARJEELING\n27.050\n88.270\nIndia\n1986\n1\n6.90\n\n\n3149\nDARJEELING\n27.050\n88.270\nIndia\n1994\n1\n8.10\n\n\n3150\nDARJEELING\n27.050\n88.270\nIndia\n1995\n1\n5.60\n\n\n3151\nDARJEELING\n27.050\n88.270\nIndia\n1997\n1\n5.70\n\n\n\n\n3152 rows × 7 columns\n\n\n\nOur function worked! It gave us the temepratures for all stations in India. The temperatures are from January, measured between 1980 and 202\n\n\nStep 5:\nNow that we can easily pull data using our function, we can make interactive plots of our data! We will use plotly to create a geographic graph of the weather stations.\nWe are going to answer this question with our plot: How does the average yearly change in temperature vary within a given country?\nTo do this, we will write a function called temperature_coefficient_plot that takes 6 parameters: db_file, country, year_begin, year_end, month, min_obs, **kwargs - db_file is the name of our database file. In this case, its “temps.db” - country is the name of the country we are inquiring about. - year_begin is the beginning of the range of years we are inquiring about - year_end is the ending of the range of years we are inquiring about - month is the month number we are inquring about (example: January is 1) - min_obs is the minimum number of observations a station needs to have reported to be included in our graph\nTo measure the average yearly change, we will have to use linear regression to create a model and find the coefficient representing the estimated yearly increase. We will then have to put this into a data frame, find each stations latitude and longitude, and plot it geographically.\n\ndef temperature_coefficient_plot(db_file, country, year_begin, year_end, month, min_obs, **kwargs):\n    \n    def estimate_yearly_increase(df):\n        X = df[[\"YEAR\"]]\n        y = df[\"TEMP\"]\n\n        # Create a linear regression model\n        model = LinearRegression()\n\n        # Fit the model\n        model.fit(X, y)\n\n        # Get the coefficient representing the estimated yearly increase\n        estimated_yearly_increase = model.coef_[0]\n\n        return estimated_yearly_increase\n\n    #uses above funciton to create data frame\n    test = query_climate_database(db_file, country, year_begin, year_end, month)\n\n    #groups all the stations w same lattide and longitude together, then applies the regression\n    result = test.groupby(['LATITUDE', 'LONGITUDE']).apply(estimate_yearly_increase).reset_index()\n\n    #this gives us how many rows relate to each station\n    groups = test.groupby(['LATITUDE', 'LONGITUDE']).transform('size')\n\n    #adds a size column\n    result[\"size\"] = groups\n\n    # filter out rows with a size less than min_obs\n    result = result[result['size'] &gt;= min_obs]\n\n    # merge the original data frame with the one that underwent linear regression\n    merged = pd.merge(result, test, on=['LATITUDE', 'LONGITUDE'])\n\n    \n    # rename columns\n    merged.columns = [\"LATITUDE\", \"LONGITUDE\", \"Estimated Yearly Increase (C°)\", \"SIZE\",\n                      \"NAME\", \"COUNTRY\", \"YEAR\", \"MONTH\", \"TEMP\"]\n\n    # round estimated increase\n    merged['Estimated Yearly Increase (C°)'] = merged['Estimated Yearly Increase (C°)'].round(4)\n\n    # create a scatter mapbox plot using plotly \n    fig = px.scatter_mapbox(merged,\n                            title='Estimated Yearly Increase in Temperature',\n                            lat='LATITUDE',\n                            lon='LONGITUDE',\n                            color='Estimated Yearly Increase (C°)',\n                            hover_name='NAME',\n                            mapbox_style=\"carto-positron\")\n\n    return fig\n\nNow test our function\n\ncolor_map = px.colors.diverging.RdGy_r # choose a colormap\nfig = temperature_coefficient_plot(\"temps.db\", \"India\", 1980, 2020, 1, \n                                   min_obs = 10,\n                                   zoom = 2,\n                                   mapbox_style=\"carto-positron\",\n                                   color_continuous_scale=color_map)\n\nfig\n\n                                                \n\n\nNow we have a geographic graph of India that shows the estiamted yearly increase in temperature for each station. This pulls data from 1980 to 2020 in the month of January\nLets do this one more time for Mexico to ensure our code works correctly. This time we will set the years to be between 1999 and 2020 and for the month of February.\n\ncolor_map = px.colors.diverging.RdGy_r # choose a colormap\nfig2 = temperature_coefficient_plot(\"temps.db\", \"Mexico\", 1999, 2020, 2, \n                                   min_obs = 2,\n                                   zoom = 2,\n                                   mapbox_style=\"carto-positron\",\n                                   color_continuous_scale=color_map)\n\nfig2\n#fig.show()\n\n                                                \n\n\n\n\nStep 6:\nNow we will make a function to plot a box plot of temperature throughout the entire country for a given month and year.\nOur function will be called temp_for_year and take 4 arguments - db is the name of our database file. In this case, its “temps.db” - country is the name of the country we are inquiring about. - month is the month number we are inquring about (example: January is 1)\nIt will use the query_climate_database to pull data for the specific country, for the given year, and for the given month. This isn’t a range of years, rather data from a specific year.\nFor our boxplot, we need an x axis, which would be the month The y axis is the temp\n\n# box plot of temperature throughout entire country for a given month and year\n\ndef temp_for_year(db, country, year, month):\n    table = query_climate_database(db_file = db,\n                       country = country, \n                       year_begin = year,\n                       year_end = year,\n                       month = month)\n\n\n\n    fig = px.box(table,\n             title = f\"Temperature in {country} for {year}\",\n             x = \"MONTH\",\n             y = \"TEMP\",\n             color = \"MONTH\",\n             width = 600,\n             height = 600)\n\n    return fig\n\nNow lets test our function\n\ntemp_for_year(\"temps.db\", \"India\", 2020, 5)\n\n                                                \n\n\nThis shows us that the median temperature in India for May of 2020 was 31.09 degreees celcius.\n\n\nStep 7:\nCreate a graph to visualize the average temperature in the entire country throughout the year, and to compare it to another country.\nTo do this, we will define a function called avg_temp_per_month with 4 parameters: file, country1, country2, year\n\nfile is the name of our database file. In this case, its “temps.db”\ncountry1 is the name of the first country we are inquiring about\ncountry2 is the name of the second country we are inquiring about\nyear is the year we are inquring about\n\ncomments throughout the function definition explain the code\n\n# average temperature in entire country for each month\n\ndef avg_temp_per_month(file, country1, country2, year):\n    \n    #df = pd.DataFrame(columns=['month', 'average_temp'])\n    months = [\"Jan\", \"Feb\", \"March\", \"April\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\",\n    \"Jan\", \"Feb\", \"March\", \"April\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\"]\n    \n    country = []\n    \n    # fills country list with 12 elements of country1 and 12 elements of country2\n    for x in range(12):\n        country.append(country1)\n    for x in range(12):\n        country.append(country2)\n    \n    temps = []\n\n    #for loops iterates over all 12 months for country1\n    for x in range(12):\n        \n        # uses function to get data frame of temps\n        table = query_climate_database(db_file = file,\n                       country = country1, \n                       year_begin = year,\n                       year_end = year,\n                       month = x+1)\n        \n        # finds average of temp for the given month\n        average = table['TEMP'].mean()\n        \n        #rounds off the temp\n        rounded = round(average, 4)\n        # adds the temp to the list\n        temps.append(rounded)\n        \n    #for loops iterates over all 12 months for country2\n    for x in range(12):\n        \n        table = query_climate_database(db_file = file,\n                       country = country2, \n                       year_begin = year,\n                       year_end = year,\n                       month = x+1)\n        \n        average = table['TEMP'].mean()\n        rounded = round(average, 4)\n\n        temps.append(rounded)\n           \n        \n        \n    df = pd.DataFrame() \n    df['Month'] = months #months list\n    df['Average Temp'] = temps #temps list\n    df[\"Country\"] = country #country list\n    \n    \n        \n    fig = px.scatter(data_frame = df,\n                 title=f\"Average Temp in each month for {country1} vs {country2} \",\n                 x = \"Month\",\n                 y = \"Average Temp\",\n                 color = \"Average Temp\",\n                 hover_name = \"Average Temp\",\n                 hover_data = [\"Month\", \"Average Temp\"],\n                 #size = \"Body Mass (g)\",\n                 #size_max = 8,\n                 width = 800,\n                 height = 500,\n                 #opacity = 0.5\n                 facet_col = \"Country\"\n                )\n\n    \n    return fig\n\n\navg_temp_per_month(\"temps.db\",\"India\",\"China\", 2020)"
  },
  {
    "objectID": "posts/bruin/bruin.html",
    "href": "posts/bruin/bruin.html",
    "title": "Bruin",
    "section": "",
    "text": "import numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()"
  },
  {
    "objectID": "posts/posts/index.html",
    "href": "posts/posts/index.html",
    "title": "HW 0",
    "section": "",
    "text": "Import all necessary packages, and import the Palmer Penguins data set. For this assignment, we use the pandas package and the matplotlib.pyplot package.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nurl = \"https://raw.githubusercontent.com/pic16b-ucla/24W/main/datasets/palmer_penguins.csv\"\ndf = pd.read_csv(url)"
  },
  {
    "objectID": "posts/posts/index.html#step-1-importing",
    "href": "posts/posts/index.html#step-1-importing",
    "title": "HW 0",
    "section": "",
    "text": "Import all necessary packages, and import the Palmer Penguins data set. For this assignment, we use the pandas package and the matplotlib.pyplot package.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nurl = \"https://raw.githubusercontent.com/pic16b-ucla/24W/main/datasets/palmer_penguins.csv\"\ndf = pd.read_csv(url)"
  },
  {
    "objectID": "posts/posts/index.html#step-2-previewing-data",
    "href": "posts/posts/index.html#step-2-previewing-data",
    "title": "HW 0",
    "section": "Step 2: Previewing Data",
    "text": "Step 2: Previewing Data\nPreview the data frame to see the column names and better understand what we’re working with.\n\ndf\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n0\nPAL0708\n1\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A1\nYes\n11/11/07\n39.1\n18.7\n181.0\n3750.0\nMALE\nNaN\nNaN\nNot enough blood for isotopes.\n\n\n1\nPAL0708\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A2\nYes\n11/11/07\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n8.94956\n-24.69454\nNaN\n\n\n2\nPAL0708\n3\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A1\nYes\n11/16/07\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n8.36821\n-25.33302\nNaN\n\n\n3\nPAL0708\n4\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A2\nYes\n11/16/07\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nAdult not sampled.\n\n\n4\nPAL0708\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A1\nYes\n11/16/07\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n8.76651\n-25.32426\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n339\nPAL0910\n120\nGentoo penguin (Pygoscelis papua)\nAnvers\nBiscoe\nAdult, 1 Egg Stage\nN38A2\nNo\n12/1/09\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n340\nPAL0910\n121\nGentoo penguin (Pygoscelis papua)\nAnvers\nBiscoe\nAdult, 1 Egg Stage\nN39A1\nYes\n11/22/09\n46.8\n14.3\n215.0\n4850.0\nFEMALE\n8.41151\n-26.13832\nNaN\n\n\n341\nPAL0910\n122\nGentoo penguin (Pygoscelis papua)\nAnvers\nBiscoe\nAdult, 1 Egg Stage\nN39A2\nYes\n11/22/09\n50.4\n15.7\n222.0\n5750.0\nMALE\n8.30166\n-26.04117\nNaN\n\n\n342\nPAL0910\n123\nGentoo penguin (Pygoscelis papua)\nAnvers\nBiscoe\nAdult, 1 Egg Stage\nN43A1\nYes\n11/22/09\n45.2\n14.8\n212.0\n5200.0\nFEMALE\n8.24246\n-26.11969\nNaN\n\n\n343\nPAL0910\n124\nGentoo penguin (Pygoscelis papua)\nAnvers\nBiscoe\nAdult, 1 Egg Stage\nN43A2\nYes\n11/22/09\n49.9\n16.1\n213.0\n5400.0\nMALE\n8.36390\n-26.15531\nNaN\n\n\n\n\n344 rows × 17 columns"
  },
  {
    "objectID": "posts/posts/index.html#step-3-breaking-up-the-data",
    "href": "posts/posts/index.html#step-3-breaking-up-the-data",
    "title": "HW 0",
    "section": "Step 3: Breaking up the data",
    "text": "Step 3: Breaking up the data\nWe see in the data there are three types of penguins: Adelie, Gentoo, and Chinstrap. We also see there’s data on each penguins flipper length and body mass.\nWe can build a scatterplot to see the relationship between the penguin’s flipper lenght and body mass. We can take this one step further and split this scatterplot up into the three types of penguins.\nLet’s start by breaking up the data frame into three smaller data frames. Each data frame will take all the entries pretaining to an individual species of penguin. Therefore, we will have 3 new data frames (since there are three species of penguins).\n\n# breaking up the data to be with certain species\nadelie = df[df[\"Species\"] == \"Adelie Penguin (Pygoscelis adeliae)\"]\ngentoo = df[df[\"Species\"] == \"Gentoo penguin (Pygoscelis papua)\"]\nchinstrap = df[df[\"Species\"] == \"Chinstrap penguin (Pygoscelis antarctica)\"]\n\nNow, we can preview the new data frame pretaining to the Adelie species.\n\nadelie\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n0\nPAL0708\n1\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A1\nYes\n11/11/07\n39.1\n18.7\n181.0\n3750.0\nMALE\nNaN\nNaN\nNot enough blood for isotopes.\n\n\n1\nPAL0708\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A2\nYes\n11/11/07\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n8.94956\n-24.69454\nNaN\n\n\n2\nPAL0708\n3\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A1\nYes\n11/16/07\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n8.36821\n-25.33302\nNaN\n\n\n3\nPAL0708\n4\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A2\nYes\n11/16/07\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nAdult not sampled.\n\n\n4\nPAL0708\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A1\nYes\n11/16/07\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n8.76651\n-25.32426\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n147\nPAL0910\n148\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nDream\nAdult, 1 Egg Stage\nN83A2\nYes\n11/13/09\n36.6\n18.4\n184.0\n3475.0\nFEMALE\n8.68744\n-25.83060\nNaN\n\n\n148\nPAL0910\n149\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nDream\nAdult, 1 Egg Stage\nN84A1\nYes\n11/17/09\n36.0\n17.8\n195.0\n3450.0\nFEMALE\n8.94332\n-25.79189\nNaN\n\n\n149\nPAL0910\n150\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nDream\nAdult, 1 Egg Stage\nN84A2\nYes\n11/17/09\n37.8\n18.1\n193.0\n3750.0\nMALE\n8.97533\n-26.03495\nNaN\n\n\n150\nPAL0910\n151\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nDream\nAdult, 1 Egg Stage\nN85A1\nYes\n11/17/09\n36.0\n17.1\n187.0\n3700.0\nFEMALE\n8.93465\n-26.07081\nNaN\n\n\n151\nPAL0910\n152\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nDream\nAdult, 1 Egg Stage\nN85A2\nYes\n11/17/09\n41.5\n18.5\n201.0\n4000.0\nMALE\n8.89640\n-26.06967\nNaN\n\n\n\n\n152 rows × 17 columns"
  },
  {
    "objectID": "posts/posts/index.html#step-4-building-the-scatterplot",
    "href": "posts/posts/index.html#step-4-building-the-scatterplot",
    "title": "HW 0",
    "section": "Step 4: Building the Scatterplot",
    "text": "Step 4: Building the Scatterplot\nNow that we have our individual data frames, we can build our scatterplot using the plt.scatter command. We will index the data within the columns “Body Mass (g)” and “Flipper Length (mm)” for our x and y axis. We will color code each speciesof penguin as well.\nWe can also add x and y axis labels, a plot title, and a legend.\n\nplt.scatter(adelie['Body Mass (g)'], adelie['Flipper Length (mm)'], marker='o', linestyle='', color='b', label='Adelie Penguin')\nplt.scatter(gentoo['Body Mass (g)'], gentoo['Flipper Length (mm)'], marker='o', linestyle='', color='red', label='Gentoo Penguin')\nplt.scatter(chinstrap['Body Mass (g)'], chinstrap['Flipper Length (mm)'], marker='o', linestyle='', color='green', label='Chinstrap Penguin')\n\n\nplt.xlabel('Body Mass (grams)')\nplt.ylabel('Flipper Length (mm)')\nplt.title('Plotting Flipper Length vs Body Mass')\n\n\nplt.legend()"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "myblog2",
    "section": "",
    "text": "HW 1\n\n\n\n\n\n\nweek w\n\n\nHomework\n\n\n\n\n\n\n\n\n\nJan 24, 2024\n\n\nNico Morrone\n\n\n\n\n\n\n\n\n\n\n\n\nHW 0\n\n\n\n\n\n\nweek 0\n\n\nHomework\n\n\n\n\n\n\n\n\n\nJan 16, 2024\n\n\nNico Morrone\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJan 11, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJan 8, 2024\n\n\nTristan O’Malley\n\n\n\n\n\n\n\n\n\n\n\n\nBruin\n\n\n\n\n\n\nweek 0\n\n\nexample\n\n\n\n\n\n\n\n\n\nJan 11, 2023\n\n\nNico\n\n\n\n\n\n\nNo matching items"
  }
]